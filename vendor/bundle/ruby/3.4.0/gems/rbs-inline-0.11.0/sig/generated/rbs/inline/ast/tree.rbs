# Generated from lib/rbs/inline/ast/tree.rb with RBS::Inline

module RBS
  module Inline
    module AST
      type token = [ Symbol, String ]

      type tree = token | Tree | Types::t | MethodType | nil

      class Tree
        attr_reader trees: Array[tree]

        attr_reader type: Symbol

        # Children but without `tWHITESPACE` tokens
        attr_reader non_trivia_trees: Array[tree]

        # @rbs type: Symbol
        def initialize: (Symbol type) -> void

        # @rbs tok: tree
        # @rbs return: self
        def <<: (tree tok) -> self

        # Returns the source code associated to the tree
        def to_s: () -> String

        # Returns `true` if token at the given index is of the given type
        def token?: (untyped type, at: untyped) -> untyped

        # Returns `true` if tree at the given index is of the given type
        def tree?: (untyped type, at: untyped) -> untyped

        # Returns n-th token from the children
        #
        # Raises if the value is not a token or nil.
        #
        # @rbs index: Integer
        # @rbs return: token?
        def nth_token: (Integer index) -> token?

        # Returns n-th token from the children
        #
        # Returns `nil` if the value is not a token.
        #
        # @rbs index: Integer
        # @rbs return: token?
        def nth_token?: (Integer index) -> token?

        # Returns n-th token from the children
        #
        # Raises if the value is not token.
        #
        # @rbs index: Integer
        # @rbs return: token
        def nth_token!: (Integer index) -> token

        # Returns n-th tree from the children
        #
        # Raises if the value is not a tree or nil.
        #
        # @rbs index: Integer
        # @rbs return: Tree?
        def nth_tree: (Integer index) -> Tree?

        # Returns n-th tree from the children
        #
        # Returns `nil` if the value is not a tree or nil.
        #
        # @rbs index: Integer
        # @rbs return: Tree?
        def nth_tree?: (Integer index) -> Tree?

        # Returns n-th tree from the children
        #
        # Raises if the value is not a tree.
        #
        # @rbs index: Integer
        # @rbs return: Tree
        def nth_tree!: (Integer index) -> Tree

        # Returns n-th type from the children
        #
        # Raises if the value is not a type or nil.
        #
        # @rbs index: Integer
        # @rbs return: Types::t?
        def nth_type: (Integer index) -> Types::t?

        # Returns n-th type from the children
        #
        # Returns `nil` if the value is not a type.
        #
        # @rbs index: Integer
        # @rbs return: Types::t?
        def nth_type?: (Integer index) -> Types::t?

        # Returns n-th type from the children
        #
        # Raises if the value is not a type.
        #
        # @rbs index: Integer
        # @rbs return: Types::t
        def nth_type!: (Integer index) -> Types::t

        # Returns n-th method type from the children
        #
        # Raises if the value is not a method type or `nil`.
        #
        # @rbs index: Integer
        # @rbs return: MethodType?
        def nth_method_type: (Integer index) -> MethodType?

        # Returns n-th method type from the children
        #
        # Returns `nil` if the value is not a method type.
        #
        # @rbs index: Integer
        # @rbs return: MethodType?
        def nth_method_type?: (Integer index) -> MethodType?

        # Returns n-th method tree from the children
        #
        # Raises if the value is not a method tree.
        #
        # @rbs index: Integer
        # @rbs return: MethodType
        def nth_method_type!: (Integer index) -> MethodType
      end
    end
  end
end
