# Generated from lib/rbs/inline/annotation_parser/tokenizer.rb with RBS::Inline

module RBS
  module Inline
    class AnnotationParser
      module Tokens
        K_RETURN: ::Symbol

        K_INHERITS: ::Symbol

        K_AS: ::Symbol

        K_OVERRIDE: ::Symbol

        K_USE: ::Symbol

        K_MODULE_SELF: ::Symbol

        K_GENERIC: ::Symbol

        K_IN: ::Symbol

        K_OUT: ::Symbol

        K_UNCHECKED: ::Symbol

        K_SELF: ::Symbol

        K_SKIP: ::Symbol

        K_YIELDS: ::Symbol

        K_MODULE: ::Symbol

        K_CLASS: ::Symbol

        K_COLON2: ::Symbol

        K_COLON: ::Symbol

        K_LBRACKET: ::Symbol

        K_RBRACKET: ::Symbol

        K_COMMA: ::Symbol

        K_STAR2: ::Symbol

        K_STAR: ::Symbol

        K_MINUS2: ::Symbol

        K_LT: ::Symbol

        K_DOT3: ::Symbol

        K_DOT: ::Symbol

        K_ARROW: ::Symbol

        K_LBRACE: ::Symbol

        K_LPAREN: ::Symbol

        K_AMP: ::Symbol

        K_QUESTION: ::Symbol

        K_VBAR: ::Symbol

        K_EOF: ::Symbol

        # `@rbs!`
        K_RBSE: ::Symbol

        # `@rbs`
        K_RBS: ::Symbol

        T_UIDENT: ::Symbol

        T_IFIDENT: ::Symbol

        T_LVAR: ::Symbol

        # The body of comment string following `--`
        T_COMMENT: ::Symbol

        # Type/method type source
        T_SOURCE: ::Symbol

        # Block type source
        T_BLOCKSTR: ::Symbol

        # `!` local variable
        T_ELVAR: ::Symbol

        T_ATIDENT: ::Symbol

        T_ANNOTATION: ::Symbol

        T_WHITESPACE: ::Symbol
      end

      class Tokenizer
        include Tokens

        KEYWORDS: Hash[String, Symbol]

        KW_RE: ::Regexp

        PUNCTS: Hash[String, Symbol]

        PUNCTS_RE: Regexp

        attr_reader scanner: StringScanner

        # Tokens that comes after the current position
        #
        # This is a four tuple of tokens.
        #
        # 1. The first array is a trivia tokens before current position
        # 2. The second token is the first lookahead token after the current position
        # 3. The third array is a trivia tokens between the first lookahead and the second lookahead
        # 4. The fourth token is the second lookahead token
        attr_reader lookahead_tokens: [ Array[token], token?, Array[token], token? ]

        # Token that comes after the current position
        # @rbs %a{pure}
        %a{pure}
        def lookahead1: () -> token?

        # Token that comes after `lookahead1`
        # @rbs %a{pure}
        %a{pure}
        def lookahead2: () -> token?

        # Returns the current char position of the first lookahead token
        #
        # ```
        # __ foo ___ bar baz
        # ^^                 Trivia tokens before lookahead1
        #   ^                #current_position
        #    ^^^             lookahead1
        #        ^^^         Trivia tokens between lookahead1 and lookahead2
        #            ^^^     lookahead2
        #                ^    <= scanner.charpos
        # ```
        def current_position: () -> Integer

        def lookaheads: () -> Array[Symbol?]

        # @rbs scanner: StringScanner
        # @rbs return: void
        def initialize: (StringScanner scanner) -> void

        # Advances the scanner
        #
        # @rbs tree: AST::Tree -- Tree to insert trivia tokens
        # @rbs eat: bool -- true to add the current lookahead token into the tree
        # @rbs return: void
        def advance: (AST::Tree tree, ?eat: bool) -> void

        # @rbs (AST::Tree?) -> String
        def consume_trivias: (AST::Tree?) -> String

        # Returns true if the scanner cannot consume next token
        def stuck?: () -> bool

        # Skips characters
        #
        # This method ensures the `current_position` will be the given `position`.
        #
        # @rbs position: Integer -- The new position
        # @rbs tree: AST::Tree -- Tree to insert trivia tokens
        # @rbs return: void
        def reset: (Integer position, AST::Tree tree) -> void

        def rest: () -> String

        # Consume given token type and inserts the token to the tree or `nil`
        #
        # @rbs *types: Symbol
        # @rbs tree: AST::Tree
        # @rbs return: void
        def consume_token: (*Symbol types, tree: AST::Tree) -> void

        # Consume given token type and inserts the token to the tree or raise
        #
        # @rbs *types: Symbol
        # @rbs tree: AST::Tree
        # @rbs return: void
        def consume_token!: (*Symbol types, tree: AST::Tree) -> void

        # Test if current token has specified `type`
        #
        # @rbs *types: Symbol
        # @rbs return: bool
        def type?: (*Symbol types) -> bool

        # Test if lookahead2 token have specified `type`
        #
        # @rbs *types: Symbol -- The type of the lookahead2 token
        # @rbs return: bool
        def type2?: (*Symbol types) -> bool

        # Ensure current token is one of the specified in types
        #
        # @rbs *types: Symbol
        # @rbs return: void
        def type!: (*Symbol types) -> void

        # Reset the current_token to incoming comment `--`
        #
        # Reset to the end of the input if `--` token cannot be found.
        #
        # @rbs return: String -- String that is skipped
        def skip_to_comment: () -> String
      end
    end
  end
end
